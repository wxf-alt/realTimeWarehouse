# 指明了根日志的   输出级别    和   输出目的地
# 输出级别
#   输出级别有5个,对应日志的级别 如果选择error,那么会输出错误和致命的日志
#   如果选择info 那么会输出 info 警告 错误 致命级别的日志
#   如果选择debug,那么所有级别都输出
#注意 （ DEBUG < INFO < WARN < ERROR < FATAL ） 设为OFF可以关闭日志
# 输出目的地
#   我们可以选择多个目的地,我们可以选择控制台 文件
#   也可以全部选择,两个地址都输出
#log4j.rootLogger=WARN,console1
#log4j.rootLogger=WARN, console
log4j.rootLogger=ERROR, console
#log4j.logger.akka=WARN, console
#log4j.logger.org.apache.kafka=WARN
#log4j.logger.org.apache.hadoop=WARN
#log4j.logger.org.apache.zookeeper=WARN

log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.target=System.out
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n
# Log all infos in the given file
#log4j.appender.file=org.apache.log4j.FileAppender
# 注意这里要修改成自己的日志目录
#log4j.appender.file.file=/tmp/flink_log
#log4j.appender.file.append=false
#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p %-60c %x - %m%n

#
## 输出到控制台
## appender:目的地 console是变量       org.apache.log4j.ConsoleAppender 代表的是控制台
#log4j.appender.console1=org.apache.log4j.ConsoleAppender
#log4j.appender.console1.target=System.out
## layout格式变量    org.apache.log4j.PatternLayout 代表的是输出时有格式
#log4j.appender.console1.layout=org.apache.log4j.PatternLayout
##ConversionPattern具体格式变量   %d{yy/MM/dd HH:mm:ss} %p %c %M(): %m%n 代表的是具体的格式
#log4j.appender.console1.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c %M(): %m%n
#
#
##输出到文件
## HFILE变量 org.apache.log4j.RollingFileAppender代表输出到文件中
#log4j.appender.HFILE2=org.apache.log4j.RollingFileAppender
## file变量 log.log是路径加文件名 这次试用的是相对路径
#log4j.appender.HFILE2.File=/home/panniu/logs/mylog.log
## 日志文件最大kb数
#log4j.appender.HFILE2.MaxFileSize=10kb
## 日志的最大记录数 值得是一共可以有多少条
#log4j.appender.HFILE2.MaxBackupIndex=1000
## layout格式变量    org.apache.log4j.SimpleLayout 简单格式
## log4j.appender.HFILE.layout=org.apache.log4j.SimpleLayout
#log4j.appender.HFILE2.layout=org.apache.log4j.PatternLayout
#log4j.appender.HFILE2.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %r %p %c Thread:%t %l %m%n